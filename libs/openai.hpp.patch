--- openai.hpp.orig	2023-05-18 02:03:38.326439825 +0300
+++ openai.hpp	2023-05-18 03:46:30.074582857 +0300
@@ -43,7 +43,7 @@
 #include "curl/curl.h"
 #endif
 
-#include <nlohmann/json.hpp>  // nlohmann/json
+#include "nlohmann/json.hpp"  // nlohmann/json
 
 namespace openai {
 
@@ -84,7 +84,7 @@
         curl_global_init(CURL_GLOBAL_ALL);
         curl_ = curl_easy_init();
         if (curl_ == nullptr) {
-            throw std::runtime_error("curl cannot initialize"); // here we throw it shouldn't happen
+            throw Php::Exception("curl cannot initialize"); // here we throw it shouldn't happen
         }
     }
 
@@ -156,8 +156,15 @@
 
         for (const auto &field_pair : fields) {
             field = curl_mime_addpart(mime_form_);
-            curl_mime_name(field, field_pair.first.c_str());
-            curl_mime_data(field, field_pair.second.c_str(), CURL_ZERO_TERMINATED);
+            auto field_first = field_pair.first.c_str();
+            curl_mime_name(field, field_first);
+            if (strcmp(field_first, "mask") == 0) // image edit
+            {
+                curl_mime_filedata(field, field_pair.second.c_str());
+            }
+            else {
+                curl_mime_data(field, field_pair.second.c_str(), CURL_ZERO_TERMINATED);
+            }
         }
         
         curl_easy_setopt(curl_, CURLOPT_MIMEPOST, mime_form_);
@@ -217,7 +224,7 @@
         is_error = true;
         error_msg = "OpenAI curl_easy_perform() failed: " + std::string{curl_easy_strerror(res_)};
         if (throw_exception_) {
-            throw std::runtime_error(error_msg);
+            throw Php::Exception(error_msg);
         }
         else {
             std::cerr << error_msg << '\n';
@@ -387,6 +394,9 @@
 
     void setProxy(const std::string& url) { session_.setProxyUrl(url); }
 
+    void setUrl(const std::string& url) { session_.setUrl(url); }
+    void setToken(const std::string& token, const std::string& organization) { session_.setToken(token, organization); }
+
     // void change_token(const std::string& token) { token_ = token; };
     void setThrowException(bool throw_exception) { throw_exception_ = throw_exception; }
 
@@ -510,7 +520,7 @@
 
     void trigger_error(const std::string& msg) {
         if (throw_exception_) {
-            throw std::runtime_error(msg);
+            throw Php::Exception(msg);
         }
         else {
             std::cerr << "[OpenAI] error. Reason: " << msg << '\n';
